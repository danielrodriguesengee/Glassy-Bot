# --- Conte√∫do do arquivo: api/ai_agent.py ---

import requests

import json

import re

import unicodedata

import logging

from config import CLOUDFLARE_ACCOUNT_ID, CLOUDFLARE_API_TOKEN, CLOUDFLARE_AI_MODEL



# --- REGRAS DE PRIORIDADE REFINADAS PARA EVITAR FALSOS POSITIVOS ---

SYSTEM_INSTRUCTION = """Sua √∫nica tarefa √© analisar o texto do usu√°rio e extrair informa√ß√µes para um sistema de agendamento de unhas.



Responda APENAS com um objeto JSON v√°lido e nada mais. N√ÉO adicione texto, explica√ß√µes ou formata√ß√£o al√©m do JSON puro.



O JSON deve ter as seguintes chaves poss√≠veis: 'intent', 'service', 'date_str', 'time_str', 'confirmation'.



'intent' pode ser: 'schedule', 'cancel', 'get_info', 'human_transfer', 'greeting', 'confirmation', 'course_info', 'ask_availability', 'thanking', 'unknown'.



'confirmation' pode ser: 'yes', 'no'.



REGRAS DE PRIORIDADE:

1.  A inten√ß√£o 'greeting' DEVE ser usada APENAS para sauda√ß√µes curtas e expl√≠citas (ex: "oi", "ol√°", "bom dia"). Nomes de pessoas ou outras frases N√ÉO devem ser classificados como 'greeting'.

2.  A inten√ß√£o 'human_transfer' DEVE ser usada APENAS quando o usu√°rio pedir explicitamente para falar com uma pessoa (ex: "falar com atendente", "ajuda", "atendente humano"). NUNCA infira esta inten√ß√£o a partir de um nome pr√≥prio como 'Larissa Felix' ou 'Rodrigues'.

3.  Se a palavra "curso", "aula" ou "aprender" estiver na frase, a inten√ß√£o DEVE ser 'course_info'.

4.  Se "cancelar" ou "desmarcar" estiverem na frase, a inten√ß√£o DEVE ser 'cancel'.

5.  Se mencionar data/hora (ex: "amanh√£", "dia 15"), priorize 'schedule'.

6.  Se o usu√°rio apenas nomear um servi√ßo (ex: "manuten√ß√£o"), a inten√ß√£o DEVE ser 'schedule' e o nome do servi√ßo deve ser extra√≠do.



REGRAS GERAIS:

- 'confirmation' com 'yes': "sim", "pode ser", "claro", "confirmo", "ok", "perfeito".

- 'confirmation' com 'no': "n√£o", "nao", "nenhum", "deixa pra l√°".

- 'thanking': Qualquer forma de agradecimento (ex: "obrigado", "valeu").



EXEMPLOS DE EXTRA√á√ÉO COMPLEXA:

"Oi, tem hor√°rio pra amanh√£ de manh√£?" -> {"intent": "schedule", "date_str": "amanh√£", "time_str": "manh√£"}

"Queria marcar manuten√ß√£o para a pr√≥xima sexta" -> {"intent": "schedule", "service": "manuten√ß√£o", "date_str": "pr√≥xima sexta"}

"Qual o valor do curso?" -> {"intent": "course_info"}

"sim" -> {"intent": "confirmation", "confirmation": "yes"}

"n√£o, nenhuma" -> {"intent": "confirmation", "confirmation": "no"}

"Larissa Felix" -> {"intent": "unknown"}

"Daniel Rodrigues" -> {"intent": "unknown"}

"""



# --- Palavras-chave para confirma√ß√µes ---

YES_KEYWORDS = {

    "sim", "pode ser", "aham", "claro", "confirmo", "ok", "okk", "okay",

    "anhan", "uhum", "certo", "beleza", "blz", "positivo", "ta", "t√°",

    "combinado", "perfeito", "isso mesmo", "isso ai", "isso a√≠", "show",

    "top", "f√©", "bora", "demoro", "demor√¥", "üëç", "üëå", "‚úÖ", "esse mesmo"

}



NO_KEYWORDS = {

    "n√£o", "nao", "nenhum", "deixa pra la", "deixa pra l√°", "sair",

    "cancela", "depois", "negativo", "nunca", "prefiro nao", "prefiro n√£o",

    "acho que nao", "acho que n√£o", "to fora", "t√¥ fora", "nem",

    "‚ùå", "üö´", "üôÖ"

}



EMOJI_MAP = {

    "üëç": "sim", "üëå": "sim", "‚úÖ": "sim",

    "‚ùå": "nao", "üö´": "nao", "üôÖ": "nao"

}



# --- Normaliza√ß√£o de texto ---

def normalize_text(text: str) -> str:

    text = text.lower().strip()

    text = unicodedata.normalize('NFKD', text).encode('ASCII', 'ignore').decode('ASCII')

    for emoji, replacement in EMOJI_MAP.items():

        text = text.replace(emoji, f" {replacement} ")

    text = re.sub(r'\s+', ' ', text)

    return text.strip()



# --- Checagem local de confirma√ß√µes ---

def local_confirmation_check(message: str):

    msg_norm = normalize_text(message)

    if msg_norm in YES_KEYWORDS:

        return {"intent": "confirmation", "confirmation": "yes"}

    if msg_norm in NO_KEYWORDS:

        return {"intent": "confirmation", "confirmation": "no"}

    return None



# --- Checagem local de inten√ß√µes simples ---

def local_intent_check(message: str):

    msg_norm = normalize_text(message)

    # Greeting simples

    if msg_norm in {"oi", "ola", "bom dia", "boa tarde", "boa noite"}:

        return {"intent": "greeting"}

    # Agradecimento

    if any(word in msg_norm for word in ["obrigado", "obg", "valeu", "agradecido", "show de bola"]):

        return {"intent": "thanking"}

    # Curso / aula

    if any(word in msg_norm for word in ["curso", "aula", "aprender"]):

        return {"intent": "course_info"}

    # Cancelamento

    if any(word in msg_norm for word in ["cancelar", "desmarcar", "imprevisto"]):

        return {"intent": "cancel"}

    # Pedido de pre√ßo

    if any(word in msg_norm for word in ["valor", "preco", "quanto"]) and "curso" not in msg_norm:

        return {"intent": "get_info"}

    # Disponibilidade

    if any(word in msg_norm for word in ["horario", "agenda", "s√≥ tem esses hor√°rios"]):

        return {"intent": "ask_availability"}

    return None



# --- Combina√ß√£o de checagens locais ---

def detect_local_intent(message: str):

    local_conf = local_confirmation_check(message)

    if local_conf:

        return local_conf

    return local_intent_check(message)



# --- Chamada para Cloudflare AI ---

def call_cloudflare_ai(messages):

    try:

        api_url = f"https://api.cloudflare.com/client/v4/accounts/{CLOUDFLARE_ACCOUNT_ID}/ai/run/{CLOUDFLARE_AI_MODEL}"

        headers = {"Authorization": f"Bearer {CLOUDFLARE_API_TOKEN}"}

        response = requests.post(api_url, headers=headers, json={"messages": messages}, timeout=10)

        response.raise_for_status()

        result = response.json()

        response_text = result.get("result", {}).get("response", "")

        json_match = re.search(r'\{.*\}', response_text, re.DOTALL)

        if json_match:

            return json.loads(json_match.group(0))

        else:

            logging.warning(f"!!! AVISO: Nenhum JSON encontrado. Resposta: {response_text}")

    except Exception as e:

        logging.warning(f"!!! ERRO AO CHAMAR API CLOUDFLARE: {e}")

    return {"intent": "unknown"}



# --- Fun√ß√£o principal de extra√ß√£o de inten√ß√£o ---

def extract_intent(user_message: str, history: list = None):

    # 1. Tenta detectar localmente

    local_intent = detect_local_intent(user_message)

    if local_intent:

        return local_intent, []



    # 2. Se n√£o detectado localmente, chama API Cloudflare

    messages = [{"role": "system", "content": SYSTEM_INSTRUCTION}]

    if history:

        messages.extend(history[-3:])

    messages.append({"role": "user", "content": user_message})



    return call_cloudflare_ai(messages), []
